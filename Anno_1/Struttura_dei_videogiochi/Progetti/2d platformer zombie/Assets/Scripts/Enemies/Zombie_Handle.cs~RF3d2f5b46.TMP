using System.Collections;
using UnityEditor;
using UnityEngine;
using UnityEngine.Rendering;

public class Zombie_Handle : MonoBehaviour
{
    public int health;
    public float speed_movement;
    public int damage;
    public float damage_delay;
    public float knockback_horizontal;
    public float knockback_vertical;
    public GameObject player;
    public Animator animator;

    public GameObject pointA;
    public GameObject pointB;
    public float distance_from_border;

    private bool can_damage;
    private int current_health;
    private bool facing_right;
    private Transform curr_point;

    private bool chasing_player;
    private bool seeking_player;

    Rigidbody2D rb;
    Player_Movement pm;
    Player_Handle ph;

    // Start is called before the first frame update
    void Start()
    {
        current_health = health;
        can_damage = true;
        rb = GetComponent<Rigidbody2D>();
        pm = player.GetComponent<Player_Movement>();
        ph = player.GetComponent<Player_Handle>();
        previous_position = transform.position;

        curr_point = pointA.transform;

        chasing_player = false;
        seeking_player = false;
    }

    public float horizontal;

    Vector3 previous_position;

    // Update is called once per frame
    void Update()
    {

    }

    void FixedUpdate()
    {
        // if player visible
        if (chasing_player)
        {
            Move_towards_player();
        }

        // 
        Update_direction();

        if (!chasing_player && !seeking_player) Loop_points();


        if (chasing_player)
        {
            // flips the zombie when changing direction
            if (horizontal > 0 && !facing_right)
            {
                Flip();
                Debug.Log("Flip right");
            }
            else if (horizontal < 0 && facing_right)
            {
                Flip();
                Debug.Log("Flip left");
            }
        }
    }

    private void OnCollisionEnter2D(Collision2D collision)
    {
        if (collision.gameObject.CompareTag("Player"))
        {
            if (can_damage) StartCoroutine(Damage_player());
        }
    }

    private void OnCollisionStay2D(Collision2D collision)
    {
        if (collision.gameObject.CompareTag("Player"))
        {
            if (can_damage) StartCoroutine(Damage_player());
                    }
    }

    private void OnTriggerEnter2D(Collider2D collision)
    {
        if (collision.gameObject.CompareTag("Player"))
        {
            chasing_player = true;
            Debug.Log("cur_point" + curr_point.name);
            animator.SetBool("Chasing", chasing_player);
        }
    }

    private void OnTriggerExit2D(Collider2D collision)
    {
        if (collision.gameObject.CompareTag("Player")) {
            chasing_player = false;
            seeking_player = true;
            animator.SetBool("Chasing", chasing_player);
        }
    }

    private void OnDrawGizmos()
    {
        Gizmos.DrawWireSphere(pointA.transform.position, distance_from_border);
        Gizmos.DrawWireSphere(pointB.transform.position, distance_from_border);
        Gizmos.DrawLine(pointA.transform.position, pointB.transform.position);
    }

    // methods

    private void Loop_points()
    {
        if (curr_point == pointA.transform)
        {
            rb.velocity = new Vector2(-speed_movement, rb.velocity.y);
            if (Vector2.Distance(transform.position, curr_point.position) < distance_from_border)
            {
                curr_point = pointB.transform;
                Flip();
            }
        }

        if (curr_point == pointB.transform)
        {
            rb.velocity = new Vector2(speed_movement, rb.velocity.y);
            if (Vector2.Distance(transform.position, curr_point.position) < distance_from_border)
            {
                curr_point = pointA.transform;
                Flip();
            }
        }
    }

    private void Update_direction()
    {
        // updating direction of zombie
        if (previous_position.x > transform.position.x)
        {
            horizontal = -1;
        }
        else if (previous_position.x < transform.position.x)
        {
            horizontal = 1;
        }
        else
        {
            horizontal = 0;
        }
        previous_position = transform.position;
    }

    private IEnumerator Damage_player()
    {
        can_damage = false;

        ph.Take_damage(damage);
        if (ph.enabled) Knockback_player(); // if player is not dead, knockback
        yield return new WaitForSeconds(damage_delay);

        can_damage = true;
    }

    private void Knockback_player()
    {
        Vector3 direction = transform.position;

        if (direction.x > 0)
        {
            Debug.Log("Knockback right");
            // moving and facing right
            pm.GetComponent<Rigidbody2D>().AddForce(new Vector2(knockback_horizontal, knockback_vertical), ForceMode2D.Impulse);
        }
        else if (direction.x < 0)
        {
            Debug.Log("Knockback left");
            // moving and facing left
            pm.GetComponent<Rigidbody2D>().AddForce(new Vector2(-knockback_horizontal, knockback_vertical), ForceMode2D.Force);
        }
    }

    private void Move_towards_player()
    {
        Vector3 cur_position = transform.position;

        Vector3 target_position = pm.player_position();

        Vector3 new_position = Vector3.MoveTowards(cur_position, target_position, speed_movement * Time.deltaTime);

        transform.position = new_position;
    }

    private void Seek_Player()
    {

    }

    public void Take_damage(int dmg)
    {
        current_health -= dmg;
        Debug.Log("Cur health: " + current_health);
        if (current_health < 1)
        {
            Die();
        }
        else
        {
            // Take damage
            // ANIMATION
        }
    }

    public void Die()
    {
        // ANIMATION

        GetComponent<Collider2D>().enabled = false;
        enabled = false;
        Destroy(gameObject);
    }

    public void Flip()
    {
        Vector3 cur_scale = transform.localScale;
        cur_scale.x *= -1;
        transform.localScale = cur_scale;

        facing_right = !facing_right;
    }

    // drawing gizmo for better understanding

}
